[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploratory Analysis on BV57",
    "section": "",
    "text": "There are a three main analyses:\n\nIntegratedDensity\nDiversity\nCopepod Body Size"
  },
  {
    "objectID": "bv57_exploratory_density.html",
    "href": "bv57_exploratory_density.html",
    "title": "Analysis of UVP data along a transect",
    "section": "",
    "text": "We need to first import the data and select the core information that we need. The UVP project folder has all the casts we want and then some. We only want the BATS Validation cruise - bv57. We’ll need to remove the hs casts.\n\n\n\n\n\n\n\n\n\nuvp_dat <- ecopart_import(\"~/BV_transect_export\") #load in initial ecopart object\n\n# we need to trim out the hs casts\n# One way to do that would be to hard-code indices for those but that's not reliable\n#So I'm using regex\n\n#get index of hs data for both par and zoo files\nhs_index_par <- grep(\"hs\",names(uvp_dat$par_files))\nhs_index_zoo <- grep('hs', names(uvp_dat$zoo_files))\n\nuvp_dat$par_files <- uvp_dat$par_files[-hs_index_par]\nuvp_dat$zoo_files <- uvp_dat$zoo_files[-hs_index_zoo]\n\n\n\n\n\nWe want to now get a little idea of the data that we have. The main questions we have are how many locations are at each site, which are day vs night, and how deep does each cast go?\n\n\nAll these data are in the meta file. Something to keep in mind is that UVP time is recorded in UTC - so you need to get sunrise/sunset times from NOAA’s Solar Calculator. I’m not super precise with it, I just go with the month at longitude.\n\n# I'm writing a function for myself for later\nget_time <- function(full_date) {\n  time_stamp <- sapply(strsplit(as.character(full_date),\" \"),\n                       `[[`,2)\n  return(as.POSIXct(time_stamp, format = '%H:%M:%S'))\n}\n\n#my function above will just get the time and set it to todays date but that is fine\nuvp_dat$meta$time_of_day <- sapply(get_time(uvp_dat$meta$sampledate), timeOfDay,'10:18:00','21:48:00',1) #this will add time of day to our metadata file\n\nThere’s actually very few night casts, let’s just go with the day casts then for this project.\n\n\n\n\n# a quick funciton to find max depth\nget_max_d <- function(zoo_file) {\n  max_d <- zoo_file$depth_including_offset[which.max(zoo_file$depth_including_offset)]\n  return(max_d)\n}\n\nmax_d <- rep(NA, length(uvp_dat$zoo_files))\nfor(i in 1:length(uvp_dat$zoo_files)) {\n  max_d[i] <- get_max_d(uvp_dat$zoo_files[[i]])\n}\ndepth_tibble <- tibble(profileid = names(uvp_dat$zoo_files),\n                       max_d = max_d)\n\nuvp_dat$meta <- as_tibble(merge(uvp_dat$meta,\n                                depth_tibble))\ntibble(Profile_id = uvp_dat$meta$profileid,\n       lat = uvp_dat$meta$latitude,\n       tod = uvp_dat$meta$time_of_day,\n       max_d = uvp_dat$meta$max_d)\n\n# A tibble: 21 x 4\n   Profile_id   lat tod   max_d\n   <chr>      <dbl> <chr> <dbl>\n 1 bv57c1      30.7 day    499 \n 2 bv57c10     26.7 day   1206.\n 3 bv57c11     26.7 night 1206.\n 4 bv57c12     27.7 day    489 \n 5 bv57c13     27.7 day   5422.\n 6 bv57c14     29.7 day   4992.\n 7 bv57c15     31.7 night 4612.\n 8 bv57c16     33.7 day   4830.\n 9 bv57c17     35.7 day    502.\n10 bv57c18     35.7 day   4366.\n# ... with 11 more rows\n\n\nLooking at this data, we have several casts going to at least 500m, some going to 1200m, and several going to 5000m. So what we can do is look at four ocean regions - epipelagic (0-200), upper mesopelagic (200-500), lower mesopelagic (500 - 1200), bathypelagic (1200 - 4000).\nNext steps will be to calculate concentration for each profile, then look at integrated densities. But first we need to rename our data to core taxonomic groups.\n\n\n\n\nlist_taxa <- function(uvp_dat) {\n  tdf <- do.call(rbind, uvp_dat$zoo_files)\n  return(tdf$name)\n} #should add name column option\n\ncbind(names(table(list_taxa(uvp_dat))),\n       table(list_taxa(uvp_dat)) / length(list_taxa(uvp_dat)))\n\n                        [,1]                      [,2]                  \nAcantharea              \"Acantharea\"              \"0.00176489464113809\" \nActinopterygii          \"Actinopterygii\"          \"0.00032088993475238\" \nAlciopidae              \"Alciopidae\"              \"0.00016044496737619\" \nAmphipoda               \"Amphipoda\"               \"0.000106963311584127\"\nAnnelida                \"Annelida\"                \"5.34816557920633e-05\"\nAulacantha              \"Aulacantha\"              \"0.00304845438014761\" \nAulacanthidae           \"Aulacanthidae\"           \"0.00534816557920633\" \nAulographis             \"Aulographis\"             \"0.00016044496737619\" \nAulosphaeridae          \"Aulosphaeridae\"          \"0.00235319285485079\" \nbadfocus<artefact       \"badfocus<artefact\"       \"0.169643812172425\"   \nbadfocus<Copepoda       \"badfocus<Copepoda\"       \"0.000106963311584127\"\nbubble                  \"bubble\"                  \"0.0251363782222698\"  \nCalanoida               \"Calanoida\"               \"0.00165793132955396\" \nCastanellidae           \"Castanellidae\"           \"0.000588298213712697\"\nChaetognatha            \"Chaetognatha\"            \"0.00139052305059365\" \nCnidaria<Hydrozoa       \"Cnidaria<Hydrozoa\"       \"0.0010161514600492\"  \nCnidaria<Metazoa        \"Cnidaria<Metazoa\"        \"0.00123007808321746\" \nCoelodendridae          \"Coelodendridae\"          \"0.000695261525296823\"\nCoelodendrum            \"Coelodendrum\"            \"0.00032088993475238\" \nCoelographis            \"Coelographis\"            \"0.000534816557920633\"\nCollodaria              \"Collodaria\"              \"0.00096266980425714\" \ncolonial<Aulosphaeridae \"colonial<Aulosphaeridae\" \"5.34816557920633e-05\"\ncolonial<Rhizaria       \"colonial<Rhizaria\"       \"0.00256711947801904\" \nCopepoda                \"Copepoda\"                \"0.0215531072842015\"  \nCrustacea               \"Crustacea\"               \"0.00064177986950476\" \nCtenophora X            \"Ctenophora X\"            \"0.000106963311584127\"\nCtenophora<Metazoa      \"Ctenophora<Metazoa\"      \"0.000106963311584127\"\ndarksphere              \"darksphere\"              \"0.115787784789817\"   \nDecapoda                \"Decapoda\"                \"5.34816557920633e-05\"\ndetritus                \"detritus\"                \"0.140763718044711\"   \nDiatoma                 \"Diatoma\"                 \"5.34816557920633e-05\"\nduplicate               \"duplicate\"               \"0.000106963311584127\"\nEchinodermata           \"Echinodermata\"           \"5.34816557920633e-05\"\nEucalanidae             \"Eucalanidae\"             \"0.000695261525296823\"\nEumalacostraca          \"Eumalacostraca\"          \"0.00112311477163333\" \nfeces                   \"feces\"                   \"0.0182907262808857\"  \nfiber<detritus          \"fiber<detritus\"          \"0.0403786501230078\"  \nForaminifera            \"Foraminifera\"            \"0.00112311477163333\" \nhouse                   \"house\"                   \"0.00310193603593967\" \nHydrozoa                \"Hydrozoa\"                \"0.00048133490212857\" \nlight<detritus          \"light<detritus\"          \"0.117392234463579\"   \nliving<                 \"living<\"                 \"0.00438549577494919\" \nMedusettidae            \"Medusettidae\"            \"0.000106963311584127\"\nOstracoda               \"Ostracoda\"               \"0.00117659642742539\" \nother<living            \"other<living\"            \"0.00080222483688095\" \nPhaeodaria              \"Phaeodaria\"              \"0.000855706492673013\"\nPolychaeta              \"Polychaeta\"              \"5.34816557920633e-05\"\nPteropoda               \"Pteropoda\"               \"0.00016044496737619\" \npuff                    \"puff\"                    \"0.0326772916889507\"  \nRhizaria                \"Rhizaria\"                \"0.00208578457589047\" \nRhizaria X              \"Rhizaria X\"              \"0.00149748636217777\" \nSalpidae                \"Salpidae\"                \"0.000267408278960317\"\nSiphonophorae           \"Siphonophorae\"           \"0.000695261525296823\"\nsolitaryblack           \"solitaryblack\"           \"0.000106963311584127\"\nsolitaryglobule         \"solitaryglobule\"         \"0.00272756444539523\" \ntemp circle             \"temp circle\"             \"0.00475986736549364\" \nTomopteridae            \"Tomopteridae\"            \"0.000588298213712697\"\ntuff                    \"tuff\"                    \"0.265910792598139\"   \nTuscaroridae            \"Tuscaroridae\"            \"0.000106963311584127\"\n\n\nFrom this, let’s look at: Rhizaria, Copepods, Trichodesmium, Chaetognath, Annelida, Eumalacostraca. One issue we want to correct is that darksphere is classified as living and we want to change that to be non-living\n\nnames <- c('living', \"Rhizaria\",\"Copepoda\",\"Trichodesmium\",\n           \"Chaetognatha\",'Annelida',\"Eumalacostraca\",'not-living','darksphere')\n\nuvp_dat <- uvp_dat %>% \n  add_zoo(names_to, 'name', names, suppress_print = T)\n\ndarksphere_switch <- function(zoo_file) {\n  new_name <- zoo_file$name\n  new_name[which(new_name == 'darksphere')] <- 'not-living'\n  return(new_name)\n}\n\nuvp_dat <- add_zoo(uvp_dat, darksphere_switch, 'name')\ntibble(names(table(list_taxa(uvp_dat))),\n       table(list_taxa(uvp_dat)) / length(list_taxa(uvp_dat)))\n\n# A tibble: 8 x 2\n  `names(table(list_taxa(uvp_dat)))` `table(list_taxa(uvp_dat))/length(list_ta~`\n  <chr>                              <table>                                    \n1 Annelida                           0.0008557065                               \n2 Chaetognatha                       0.0013905231                               \n3 Copepoda                           0.0240132635                               \n4 Eumalacostraca                     0.0012835597                               \n5 living                             0.0194673227                               \n6 not-living                         0.6273933041                               \n7 Rhizaria                           0.0270082362                               \n8 Trichodesmium                      0.2985880843                               \n\n\n\n\n\n\nWe now want to calculate the concentration of different taxa. We’ll do this in 20m bins.\n\nconc_list <- vector('list',length(uvp_dat$zoo_files))\nnames(conc_list) <- names(uvp_dat$zoo_files)\nfor(i in 1:length(conc_list)) {\n  conc_list[[i]] <- uvp_conc(uvp_dat,names(conc_list)[i],seq(0,max(uvp_dat$zoo_files[[i]]$depth_including_offset),20))\n  \n  conc_list[[i]]$mp <- get_bin_limtis(conc_list[[i]]$db)$mp\n}\n\nWith this, we can now want the integrated abundance for our four ocean zones. We’ll set up a holder shell first. Then fill it out with needed information about each cast which goes into it. We’ll reference the meta data folder a lot for this:\n\nintg_abund <- vector('list', 4)\nnames(intg_abund) <- c('euphotic','upper_meso',\n                       'lower_meso','bathy')\n\n#a function I might use later\n#' @param max_d a vector of max_depths corresponding to casts\n#' @param depth_breaks numeric vector with zone limits\n#' @param zone_labels character vector of names for lower limits\nassign_zones <- function(max_d, depth_breaks, zone_labels) {\n  if(length(depth_breaks) != length(zone_labels)) {\n    stop('depth_breaks and zone_labels must be equal length')\n  }\n  \n  d_match <- sapply(max_d, nearest, depth_breaks)\n  zones <- zone_labels[match(d_match, depth_breaks)]\n  return(zones)\n}\n\nuvp_dat$meta$zone <- sapply(uvp_dat$meta$max_d, assign_zones,\n                            c(500,1200,4000),\n                            c(2,3,4))\n\nfor(i in 1:length(intg_abund)) {\n  intg_abund[[i]]$d_lim <- c(0,200,500,1200,4000)[c(i, i+1)]\n  intg_abund[[i]] <- c(intg_abund[[i]], vector('list', 5))\n  names(intg_abund[[i]]) <- c('d_lim','Trichodesmium','Rhizaria',\n                            'Eumalacostraca','Copepoda', 'Chaetognatha')\n  for(j in 2:length(intg_abund[[i]])) {\n    intg_abund[[i]][[j]]$profile_id <- uvp_dat$meta$profileid[which(uvp_dat$meta$zone >= i)]\n  }\n}\n\nNow we have a list shell set up to integrate abundance for each of our taxa of interest in each zone. This will be a fairly large loop since we’re iterating the process many times over. This is definitely the quick and dirty way to get things done. In the future I might want to build out functions for each of these tasks then apply them to each individual taxa\n\n#ugly functions to avoid ridiculous looping\nsubset_taxa <- function(df, taxa) {\n  rdf <- df[df$taxa == taxa,]\n  return(rdf)\n}\n\nsubset_d <- function(df, d_lower, d_upper) {\n  rdf <- df[df$mp > d_lower &\n              df$mp < d_upper, ]\n  return(rdf)\n}\n\norg_loop <- function(df, lim_list) {\n  intg <- trapz_integarate(df$mp, df$conc_m3,\n                           lim_list$d_lim[1], lim_list$d_lim[2],\n                           subdivisions = 500)\n  return(intg$value)\n}\n\nnrow_check <- function(df) {\n  if(nrow(df) == 0) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n  \nfor(i in 1:length(intg_abund)) {\n  for(j in 2:length(intg_abund[[i]])) {\n    temp_conc_list <- lapply(conc_list, subset_taxa, names(intg_abund[[i]])[j])\n    temp_conc_list <- lapply(temp_conc_list, subset_d, intg_abund[[i]]$d_lim[1], intg_abund[[i]]$d_lim[2])\n    temp_conc_list <- temp_conc_list[which(names(temp_conc_list) %in% intg_abund[[i]][[j]]$profile_id)]\n    \n    if(any(!(sapply(temp_conc_list,nrow_check)))) {\n      drop <- which(!(sapply(temp_conc_list,nrow_check)))\n      temp_conc_list <- temp_conc_list[-drop]\n      intg_abund[[i]][[j]]$profile_id <- intg_abund[[i]][[j]]$profile_id[-drop]\n    }\n    \n    intg_taxa <- sapply(temp_conc_list, org_loop, intg_abund[[i]])\n    intg_abund[[i]][[j]]$num_m2 <- as.numeric(intg_taxa[match(names(intg_taxa),intg_abund[[i]][[j]]$profile_id)])\n  }\n}\n\nGreat! Now we have a big set of data with integrated abundances in each four depth zone. Now all we have to do is plot them according to their latitudes. Looking at the data however, it seems that we have really limited data for Eumalacostraca and Chaetognatha. So let’s just look at Copepods, Rhizaria, and Trichodesmium.\n\n\n\nBefore we plot the data, it is nice to get everything into a clean plotting dataframe. I’m thinking that it’ll be best to plot all three taxa on panels based on the depth\n\n#set the taxa we are intested in plotting\nplot_taxa <- c('Trichodesmium', 'Rhizaria', 'Copepoda')\n\nmush_into_df <- function(obj) {\n  rdf <- as.data.frame(obj[[1]])\n  rdf$taxa <- rep(names(obj), nrow(rdf))\n  return(rdf)\n}\n\nplot_list <- vector('list', 4)\nnames(plot_list) <- c('Euphotic', 'Upper_Meso','Lower_Meso','Bathy')\n\nfor(i in 1:length(plot_list)) {\n  for(j in 1:length(intg_abund[[i]][plot_taxa])) {\n    plot_list[[i]][[j]] <- mush_into_df(intg_abund[[i]][plot_taxa[j]])\n  }\n  plot_list[[i]] <- do.call(rbind, plot_list[[i]])\n  \n  plot_list[[i]] <- merge(plot_list[[i]],\n                          data.frame(profile_id = uvp_dat$meta$profileid,\n                                     lat = uvp_dat$meta$latitude))\n  \n}\n\nGreat! Now everything is all set up for us to plot our figures based on latitude\n\nplot_output <- vector('list', 4)\nfor(i in 1:length(plot_output)) {\n  plot_list[[i]] <- plot_list[[i]][!is.na(plot_list[[i]]$num_m2),]\n  plot_output[[i]] <- ggplot(plot_list[[i]],aes(y = num_m2, x = lat, col = taxa)) +\n   geom_point(size = 2) +\n    geom_smooth(se = F, method = 'loess',\n                size = 1, alpha = .05, span = 1)+\n   coord_flip()+\n    labs(x = 'Latitude', y = 'Integrated Abudance [Number/m2]',\n         subtitle = names(plot_list)[i],\n         col = \"\")+\n   theme_bw()\n}\nprint(plot_output)\n\n[[1]]\n\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n[[2]]\n\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n[[3]]\n\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n[[4]]\n\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nCool we have some figures to start working with. I’m saving a bit of data to and providing here. It is an RDS so to load it you just type readRDS(‘filename.rds’).\n\nsaveRDS(plot_list, './item01_integrated-abundances-by-zone')"
  },
  {
    "objectID": "bv57_exploratory_taxa-diversity.html",
    "href": "bv57_exploratory_taxa-diversity.html",
    "title": "Taxa Richness as a funciton of latitude",
    "section": "",
    "text": "In this analysis we are going to look at the richness of different taxa along the latitudinal gradient. We’ll use simpson’s diversity index. There’s a wide range of how this is calculated but I like to do the probability of two randomly selected individuals being the same group. One important caveat for our approach here is that not all taxa are identified to the same specificity. Some are genera, some are family, some are even more broad. This can greatly influence the reliability of this index. This is particularly important to think about with Rhizaria. Those we can identify with much more specificity than other groups. For that reason, if we just did best possible taxonomic category, our biodiversity index would just be a function of overall rhizaria abundance. So I’m going to split up Rhizaria biodiversity and other zooplankton diversity. Notably, I’m excluding trichodesmium which is a phytoplankton.\n\n1 - Getting our data set up\nFirst, we need to set up our data frames. We only need the identification data here, not the volumes. I’m going to make two lists, one with just the Rhizaria, another with just the other zooplankton\n\nRhiz_names <- c('Rhizaria', 'living', 'not-living', 'Collodaria') #these are going to be used as an index to keep rhizaria\nother_names <- c('living', 'Actinopterygii','Alciopidae','Amphipoda','Annelida','not-living','Copepoda','Chaetognatha','Cnidaria','Crustacea','Ctenophora','Decapoda','Echinodermata','Eucalanidae','Hydrozoa','Ostracoda','Polychaeta','Pteropoda','Salpidae','Siphonophorae','Tomopteridae')\n\nrhiz_dat <- add_zoo(uvp_dat, names_to, 'Rhiz_or_not', Rhiz_names, suppress_print = T)\nother_zoop <- add_zoo(uvp_dat, names_to, 'Zoop', other_names, suppress_print = T)\n\ntrim_to <- function(df, match_col, drop_names) {\n  \n  rdf <- df[which(!(df[[match_col]] %in% drop_names)),]\n  return(rdf)\n  \n}\n\nrhiz_only <- lapply(rhiz_dat$zoo_files, trim_to, 'Rhiz_or_not',c('living','not-living'))\nother_only <- lapply(other_zoop$zoo_files, trim_to, 'Zoop',c('living','not-living'))\n\n\n\n2 - Calculating diversity index.\nNow, I have two lists of tibbles: one with just the rhizaria and one with all other zooplankton. We’ll want to loop through these and assign them diversity values.\n\nLet’s define a function for diversity:\n\n#' Get Simpson's Diversity Index\n#' \n#' @param vect a character vector of taxa names\nsimpsons_d <- function(vect) {\n  prob <- table(vect) / length(vect)\n  return(sum(prob^2))\n}\n\nNow we can use that function for calculating the diversity with each cast. But first, we’ll want to separate out the casts into euphotic, upper meso, lower meso, and bathypelagic\n\ndb <- c(0,200,500,1200,4000)\nrhiz_bins <- lapply(rhiz_only, bin_taxa,db)\nzoo_bins <- lapply(other_only, bin_taxa,db)\n\n#a quicker way to get it with existing functions\nrhiz_bins <- lapply(rhiz_bins, function(df) {split(df, f = df[['db']])})\nzoo_bins <- lapply(zoo_bins, function(df) {split(df, f = df[['db']])})\n\nsim_d <- function(df) {\n  if(nrow(df) == 0) {\n    return(NA)\n  }\n  prob <- df$x/sum(df$x)\n  return(sum(prob^2))\n}\n\nrhiz_div <- vector('list', length(rhiz_bins))\nzoo_div <- vector('list', length(zoo_bins))\nnames(rhiz_div) <- names(rhiz_bins)\nnames(zoo_div) <- names(zoo_bins)\nfor(i in 1:length(rhiz_div)) {\n  rhiz_div[[i]] <- lapply(rhiz_bins[[i]], sim_d)\n  zoo_div[[i]] <- lapply(zoo_bins[[i]], sim_d)\n  \n  rhiz_div[[i]] <- data.frame(db = names(rhiz_div[[i]]),\n                              sim_d = unlist(rhiz_div[[i]]),\n                              profile_id = names(rhiz_div[i]))\n  zoo_div[[i]] <- data.frame(db = names(zoo_div[[i]]),\n                             sim_d = unlist(zoo_div[[i]]),\n                             profile_id = names(zoo_div[i]))\n}\nrhiz_div <- do.call(rbind, rhiz_div)\nzoo_div <- do.call(rbind, zoo_div)\nrow.names(rhiz_div) <- NULL\nrow.names(zoo_div) <- NULL\n\n#trim out the deepest observations\nrhiz_div <- rhiz_div[rhiz_div$db %in% levels(cut(db,db)),]\nzoo_div <- zoo_div[zoo_div$db %in% levels(cut(db,db)),]\n\nAnd we’ll have to merge those with latitude data\n\nrhiz_div <- merge(rhiz_div, \n                  data.frame(profile_id = uvp_dat$meta$profileid,\n                             lat = uvp_dat$meta$latitude))\nzoo_div <- merge(zoo_div, \n                  data.frame(profile_id = uvp_dat$meta$profileid,\n                             lat = uvp_dat$meta$latitude))\n\nggplot(rhiz_div, aes(x = lat, y = sim_d, col = db))+\n  geom_point(alpha = .5, size = 1)+\n  geom_line(stat = 'smooth', method = 'gam',\n            alpha = .6, span = 5, size = 1)+\n  coord_flip()+\n  labs(x = 'Latitude', y = 'Simpsons D', subtitle = 'Rhizaria')+\n  theme_bw()\n\n`geom_smooth()` using formula 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 18 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 18 rows containing missing values (geom_point).\n\n\n\n\nggplot(zoo_div, aes(x = lat, y = sim_d, col = db))+\n  geom_point(alpha = .5, size = 1)+\n  geom_line(stat = 'smooth', method = 'gam',\n            alpha = .6, span = 5, size = 1)+\n  coord_flip()+\n  labs(x = 'Latitude', y = 'Simpsons D', subtitle = 'Other Zoops')+\n  theme_bw()\n\n`geom_smooth()` using formula 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 19 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 19 rows containing missing values (geom_point)."
  }
]